---
title: "Pairwise method comparison"
---

## What does it mean? 

If you're using [pt.clump](glossary.html) (without cross validation) to develop new polygenic risk scores for type 2 diabetes, you could make a better score by using any of the other tested methods.

Other phenotypes show different patterns. Try changing the baseline method and adjusting the phenotype below.

```{r}
#| echo: false
#| message: false
library(dplyr)
library(prsCompaR)
data(dst)
```

```{r}
#| echo: false
#| message: false
dst %>%
  select(method_x, bbid, ancestry, method_x, method_type_x, beta_diff, beta_y, ci_low_diff, ci_high_diff, phenotype, method_y, method_type_y) %>%
  mutate(relative_beta_diff = beta_diff / beta_y,
         relative_ci_high_diff = ci_high_diff / beta_y,
         relative_ci_low_diff = ci_low_diff / beta_y) -> pairwise

endpoints <- unique(metrics$phenotype)

ojs_define(pairwise)
ojs_define(endpoints)
```

```{ojs}
//| code-fold: true
//| panel: input

viewof method_y = Inputs.radio(
  ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
  { value: ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
  value: "pt.clump",
  label: "Baseline method:",
  sort: true, 
  unique: true,
  disabled: disable_method_type[method_type]}
)

viewof method_type = Inputs.radio(["CV", "auto"],
{ label: "Tuning method:",
  value: "auto"})
  
viewof endpoint = Inputs.select(endpoints, {value: "T2D", label: "Endpoint:"})

viewof use_relative = Inputs.radio(["relative", "raw"],
{ label: "Difference metric",
  value: "relative"})
  
filtered = transpose(pairwise).filter(function(x) {
  return method_y.includes(x.method_y) &&
      method_type.includes(x.method_type_y) &&
      endpoint.includes(x.phenotype);
})
```

```{ojs}
//| echo: false

beta_map = new Map([["x_label", "βₓ - βᵧ"], ["x", "beta_diff"], ["error_bar_low", "ci_low_diff"], ["error_bar_high", "ci_high_diff"]])
relative_map = new Map([["x_label", "(βₓ - βᵧ) / βᵧ"], ["x", "relative_beta_diff"], ["error_bar_low", "relative_ci_low_diff"], ["error_bar_high", "relative_ci_high_diff"]])
x_map = ({ "relative": relative_map, "raw": beta_map })

// some methods only have one method type, so disable the radio button
disable_method_type = ({ "CV": ["prscs", "sbayesr", "dbslmm"], "auto": ["UKBB.EnsPRS"]})
```

```{ojs}
//| echo: false

Plot.plot({
  grid: true,
  marginLeft: 150,
  color: {
    type: "categorical",
    legend: false
  },
  symbol: {
    legend: true
  },
  style: {
    fontSize: "12px"
  },
  facet: {
    data: filtered, 
    y: "bbid",
    marginRight: 75,
  },
  fy: {
    label: "Biobank",
    domain: ["ebb", "finngen", "hunt", "ukbb"]
  },
  x: {
    label: x_map[use_relative].get("x_label")
  },
  y: {
    label: "Score development method"
  },
  marks: [
    Plot.frame(),
    Plot.link(filtered, {
      filter: (d) => d.ancestry == "EUR",
      x1: x_map[use_relative].get("error_bar_low"),
      x2: x_map[use_relative].get("error_bar_high"),
      y1: "method_x",
      y2: "method_x"
    }),
    Plot.text([`EUR`], {
      fy: ["bbid"],
      frameAnchor: "bottom-right",
      lineWidth: 18,
      dx: -5,
      dy: -5
    }),
    Plot.ruleX([0], {stroke: "lightgray", strokeWidth: 2, strokeDasharray: "4 2"}),
    Plot.dot(filtered, {
      filter: (d) => d.ancestry == "EUR",
      x: x_map[use_relative].get("x"),
      y: "method_x",
      fill: "method_x",
      symbol: "method_type_x"
    })
  ]
})

Plot.plot({
  grid: true,
  marginLeft: 150,
  color: {
    type: "categorical",
    legend: false
  },
  symbol: {
    legend: false
  },
  style: {
    fontSize: "12px"
  },
  facet: {
    data: filtered, 
    y: "bbid",
    marginRight: 75,
    marginTop: 50
  },
  fy: {
    label: "Biobank",
    domain: ["gnh", "ukbb"]
  },
  x: {
    label: x_map[use_relative].get("x_label")
  },
  y: {
    label: "Score development method"
  },
  marks: [
    Plot.frame(),
    Plot.dot(filtered, {
      filter: (d) => d.ancestry == "SAS",
      x: x_map[use_relative].get("x"),
      y: "method_x",
      fill: "method_x",
      symbol: "method_type_x"
    }),
    Plot.link(filtered, {
      filter: (d) => d.ancestry == "SAS",
      x1: x_map[use_relative].get("error_bar_low"),
      x2: x_map[use_relative].get("error_bar_high"),
      y1: "method_x",
      y2: "method_x"
    }),
    Plot.text([`SAS`], {
      fy: ["bbid"],
      frameAnchor: "bottom-right",
      lineWidth: 18,
      dx: -5,
      dy: -5
    }),
    Plot.ruleX([0], {stroke: "lightgray", strokeWidth: 2, strokeDasharray: "4 2"})
  ]
}) 
```