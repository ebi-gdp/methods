---
title: "Meta analysis across biobanks"
---

## What does it mean?

A simple explanation of meta analysis.

## Explore the data

### Effect sizes

```{r setup, echo=FALSE, message=FALSE}
library(prsCompaR)
library(dplyr)

data("meta_res")
data("pv_mrg")

pv_mrg %>%
  mutate(relative_beta_diff = beta_diff / beta_y,
         relative_ci_high_diff = ci_high_diff / beta_y,
         relative_ci_low_diff = ci_low_diff / beta_y) -> pv_mrg

endpoints <- unique(meta_res$phenotype)
pairwise_endpoints <- unique(pv_mrg$phenotype)
ojs_define(meta_res)
ojs_define(endpoints)
ojs_define(pv_mrg)
ojs_define(pairwise_endpoints)
```

```{ojs}
//| code-fold: true
//| panel: input

viewof methods = Inputs.checkbox(
  ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
  { value: ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
    label: "Method:",
    sort: true, 
    unique: true }
)

viewof ancestries = Inputs.checkbox(
  ["EUR", "SAS"],
  { label: "Ancestry",
    value: ["EUR", "SAS"],
    sort: true,
    unique: true
  })

viewof endpoint = Inputs.select(endpoints, {value: "T2D", label: "Endpoint:"})

viewof best_method = Inputs.toggle({label: "Show best method:", value: false})

filtered = transpose(meta_res).filter(function(metric) {
    return methods.includes(metric.method) && 
      ancestries.includes(metric.ancestry) && 
      endpoint.includes(metric.phenotype);
})
```

```{ojs}
//| code-fold: true
Plot.plot({
  grid: true,
  // make plot accessible for screen readers
  ariaLabel: "Explanation of some stuff", // todo: fix
  marginTop: 50,
  marginLeft: 150,
  marginRight: 80,
  x: {
    label: "β →",
    nice: true
  },
  y: {
    label: "Development method"
  },
  color: {
    type: "categorical",
    legend: false
  },
  symbol: {
    legend: true
  },
  style: {
    fontSize: "12px"
  },
  facet: {
    data: filtered, 
    x: "ancestry",
    marginRight: 75,
    marginTop: 50
  },
  fx: {
    label: "Ancestry"
  },
  marks: [
    Plot.frame(),
    // link == error bar
    Plot.link(filtered, {
      x1: "ci_high",
      x2:  "ci_low",
      y1: "method",
      y2: "method"
    }),
    Plot.dot(filtered, {
      x: "beta",
      y: "method",
      fill: "method",
      symbol: "tuning_type"
    })
  ]
})
```

### Pairwise method comparison

```{ojs}
//| code-fold: true
//| panel: input
viewof method_y = Inputs.radio(
  ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
  { value: ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
  value: "pt.clump",
  label: "Baseline method:",
  sort: true, 
  unique: true,
  disabled: disable_method_type[method_type]}
)

viewof method_type = Inputs.radio(["CV", "auto"],
{ label: "Tuning method:",
  value: "auto"})
  
viewof pairwise_endpoint = Inputs.select(pairwise_endpoints, {value: "T2D", label: "Endpoint:"})


viewof use_relative = Inputs.radio(["relative", "raw"],
{ label: "Difference metric",
  value: "relative"})
  
filtered_pairwise = transpose(pv_mrg).filter(function(x) {
  return method_y.includes(x.method_y) &&
      method_type.includes(x.method_type_y) &&
      pairwise_endpoint.includes(x.phenotype);
})
```

```{ojs}
//| code-fold: true
beta_map = new Map([["x_label", "βₓ - βᵧ →"], ["x", "beta_diff"], ["error_bar_low", "ci_low_diff"], ["error_bar_high", "ci_high_diff"]])
relative_map = new Map([["x_label", "(βₓ - βᵧ) / βᵧ →"], ["x", "relative_beta_diff"], ["error_bar_low", "relative_ci_low_diff"], ["error_bar_high", "relative_ci_high_diff"]])
x_map = ({ "relative": relative_map, "raw": beta_map })
// some methods only have one method type, so disable the radio button
disable_method_type = ({ "CV": ["prscs", "sbayesr", "dbslmm"], "auto": ["UKBB.EnsPRS"]})

Plot.plot({
  grid: true,
  marginLeft: 150,
  marginRight: 80,
  color: {
    type: "categorical",
    legend: false
  },
  symbol: {
    legend: true
  },
  style: {
    fontSize: "12px"
  },
  facet: {
    data: filtered_pairwise, 
    x: "ancestry",
    marginRight: 75,
  },
  x: {
    label: x_map[use_relative].get("x_label")
  },
  y: {
    label: "Score development method"
  },
  fx: {
    label: "Ancestry"
  },
  marks: [
    Plot.frame(),
    Plot.link(filtered_pairwise, {
      x1: x_map[use_relative].get("error_bar_low"),
      x2: x_map[use_relative].get("error_bar_high"),
      y1: "method_x",
      y2: "method_x"
    }),
    Plot.ruleX([0], {stroke: "lightgray", strokeWidth: 2, strokeDasharray: "4 2"}),
    Plot.dot(filtered_pairwise, {
      x: x_map[use_relative].get("x"),
      y: "method_x",
      fill: "method_x",
      symbol: "method_type_x"
    })
  ]
})
```