---
title: "Meta analysis across biobanks"
---

<details>

<summary>Meta analysis explanation</summary>

<p>We meta-analysed PGS effect sizes β using meta-analytic mixed models. The absolute performance of PGS varied considerably between biobanks for some phenotypes. For this reason, confidence intervals may appear larger than they do for individual biobanks.</p>

<p>By looking at differences between PGS effect sizes (βₓ - βₓ), we can partially adjust for the variability between biobanks. As for the the results in the [relative effect size comparisons](relative.qmd), the confidence intervals of these differences are adjusted for the correlation between PGS. We provide the option to divide by the effect size of the chosen baseline method ((βₓ - βₓ) / βᵧ) to display "relative" performance.</p>

<p>While we sometimes cannot confidently estimate the absolute performance (β) of methods across biobanks in the meta-analytical mixed model, we generally can make more accurate claims about "raw" differences in performance (βₓ - βₓ).</p>

</details>

Instead of comparing biobanks separately, we can pool information across all of the biobanks and perform a meta-analysis, which improves the fidelity of our [absolute effect size](effect-sizes.qmd) and [relative effect size](relative.qmd) benchmarks.

## Explore the data

### Absolute effect sizes

This figure corresponds to Figure 4 in the published article.

```{r setup, echo=FALSE}
library(pgsCompaR)
# load data from R data package
data(meta_res)
data(pv_mrg)
endpoints <- unique(meta_res$phenotype)
pairwise_endpoints <- unique(pv_mrg$phenotype)
# make data ready for observable JS
ojs_define(meta_res)
ojs_define(endpoints)
ojs_define(pv_mrg)
ojs_define(pairwise_endpoints)
```

```{ojs}
//| echo: false
//| panel: sidebar
viewof methods = Inputs.checkbox(
  ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
  { value: ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
    label: "Method:",
    sort: true, 
    unique: true }
)

viewof ancestries = Inputs.checkbox(
  ["EUR", "SAS"],
  { label: "Ancestry",
    value: ["EUR", "SAS"],
    sort: true,
    unique: true
  })

viewof endpoint = Inputs.select(endpoints, {value: "T2D", label: "Endpoint:"})

viewof best_method = Inputs.toggle({ label: "Filter best method?:", values: [["best"], ["best", "notbest"]]})

```

```{ojs}
//| panel: fill
//| echo: false
Plot.plot({
  grid: true,
  // make plot accessible for screen readers
  ariaLabel: "Explanation of some stuff", // todo: fix
  marginTop: 50,
  marginLeft: 150,
  marginRight: 80,
  x: {
    label: "β →",
    nice: true
  },
  y: {
    label: "Development method"
  },
  color: {
    domain: ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
    range: ["#5778a4", "#e49444", "#d1615d", "#85b6b2", "#6a9f58", "#e7ca60", "#a87c9f", "#f1a2a9"]
  },
  symbol: {
    legend: true
  },
  style: {
    fontSize: "12px"
  },
  facet: {
    data: filtered, 
    x: "ancestry",
    marginRight: 75,
    marginTop: 50
  },
  fx: {
    label: "Ancestry"
  },
  marks: [
    Plot.frame(),
    // link == error bar
    Plot.link(filtered, {
      x1: "ci_high",
      x2:  "ci_low",
      y1: "method",
      y2: "method"
    }),
    Plot.dot(filtered, {
      x: "beta",
      y: "method",
      fill: "method",
      symbol: "tuning_type"
    })
  ]
})
```

```{ojs}
//| echo: false
import { aq, op } from '@uwdata/arquero'

filtered = aq.fromJSON(meta_res) 
  .params({methods: methods, ancestries: ancestries, endpoint: endpoint, best_method: best_method })
  .filter((d, $) => op.includes($.ancestries, d.ancestry) && 
    op.includes($.methods, d.method) &&
    op.includes($.endpoint, d.phenotype))
  .groupby(['ancestry', 'phenotype'])
  .derive( { best_method: d => d.beta == op.max(d.beta) ? "best": "notbest" })
  .filter((d, $) => op.includes($.best_method, d.best_method ))
```

### Relative effect size 

This figure corresponds to Figure 3A and Table 3 in the accompanying paper.

```{ojs}
//| panel: sidebar
//| echo: false

viewof method_y = Inputs.radio(
  ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
  { value: ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
  value: "pt.clump",
  label: "Baseline method:",
  sort: true, 
  unique: true,
  disabled: disable_method_type[method_type]}
)

viewof method_type = Inputs.radio(["CV", "auto"],
{ label: "Tuning method:",
  value: "CV"})
  
viewof pairwise_endpoint = Inputs.select(pairwise_endpoints, {value: "T2D", label: "Endpoint:"})

viewof use_relative = Inputs.radio(["relative", "raw"],
{ label: "Difference metric",
  value: "relative"})
```

```{ojs}
//| panel: fill
//| echo: false

beta_map = new Map([["x_label", "βₓ - βᵧ →"], ["x", "beta_diff"], ["error_bar_low", "ci_low_diff"], ["error_bar_high", "ci_high_diff"]])
relative_map = new Map([["x_label", "(βₓ - βᵧ) / βᵧ →"], ["x", "relative_beta_diff"], ["error_bar_low", "relative_ci_low_diff"], ["error_bar_high", "relative_ci_high_diff"]])
x_map = ({ "relative": relative_map, "raw": beta_map })
// some methods only have one method type, so disable the radio button
disable_method_type = ({ "CV": ["prscs", "sbayesr", "dbslmm"], "auto": ["UKBB.EnsPRS"]})

Plot.plot({
  grid: true,
  marginLeft: 150,
  marginRight: 80,
  color: {
    domain: ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
    range: ["#5778a4", "#e49444", "#d1615d", "#85b6b2", "#6a9f58", "#e7ca60", "#a87c9f", "#f1a2a9"]
  },
  symbol: {
    legend: true
  },
  style: {
    fontSize: "12px"
  },
  facet: {
    data: filtered_pairwise, 
    x: "ancestry",
    marginRight: 75,
  },
  x: {
    label: x_map[use_relative].get("x_label")
  },
  y: {
    label: "Score development method"
  },
  fx: {
    label: "Ancestry"
  },
  marks: [
    Plot.frame(),
    Plot.link(filtered_pairwise, {
      x1: x_map[use_relative].get("error_bar_low"),
      x2: x_map[use_relative].get("error_bar_high"),
      y1: "method_x",
      y2: "method_x"
    }),
    Plot.ruleX([0], {stroke: "lightgray", strokeWidth: 2, strokeDasharray: "4 2"}),
    Plot.dot(filtered_pairwise, {
      x: x_map[use_relative].get("x"),
      y: "method_x",
      fill: "method_x",
      symbol: "method_type_x"
    })
  ]
})
```

```{ojs}
//| echo: false
filtered_pairwise = aq.fromJSON(pv_mrg)
  .derive({ relative_beta_diff: d => d.beta_diff / d.beta_y,
    relative_ci_high_diff: d => d.ci_high_diff / d.beta_y,
    relative_ci_low_diff: d => d.ci_low_diff / d.beta_y })
  .params({endpoint: pairwise_endpoint, method_y: method_y, method_type: method_type})
  .filter((d, $) => op.includes($.method_type, d.method_type_y ) &&
    op.includes($.method_y, d.method_y) &&
    op.includes($.endpoint, d.phenotype ))
```
