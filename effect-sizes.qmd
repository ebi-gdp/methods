---
title: "Polygenic risk score effect sizes"
---

<details>
  <summary>Metrics explanation</summary>
  
  <dl>
    <dt>AUC</dt>
    <dd>Area Under Receiver Operating Characteristic</dd>
    <dd>This metric cares only about relative ordering of observations, and is available only for binary traits.</dd>

    <dt>β</dt>
    <dd>Standardized regression coefficients. For continuous traits, this is the change in the trait (in standard deviations) per standard deviation of the PGS. For binary traits, this is the change in the log-odds per standard deviation of the PGS.</dd>
    <dd>This is the metric that was used for meta-analyses.</dd>

    <dt>Odds Ratio (OR)</dt>
    <dd>This is the change in the odds ratio per standard deviation of the PGS (exp(β))</dd>
  
    <dt>R²</dt>
    <dd>This is the variance explained by the PGS on the observed scale for continuous traits, or on the liability scale for binary traits</dd>
  </dl>
</details>


This interactive plot corresponds to Figure 1A and Supplementary Figures 1-5 in the published article.

```{r setup}
#| echo: false
#| message: false
library(pgsCompaR)
data(metrics)
endpoints <- unique(metrics$phenotype)
ojs_define(metrics)
ojs_define(endpoints)
```

```{ojs}
//| echo: false
//| panel: sidebar

viewof biobanks = Inputs.checkbox(
  new Map( 
    [["UK Biobank", "ukbb"], ["Estonia Biobank", "ebb"], ["Genes & Health", "gnh"], ["FinnGenn", "finngen"], ["HUNT", "hunt"]]),
  { value: ["ukbb", "ebb", "gnh", "finngen", "hunt"], 
    label: "Biobank:",
    format: ([name, value]) => `${name} (${value})`, 
    sort: true, 
    unique: true }
)

viewof methods = Inputs.checkbox(
  ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
  { value: ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpred2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
    label: "Method:",
    sort: true, 
    unique: true }
)

viewof ancestries = Inputs.checkbox(
  ["EUR", "SAS"],
  { label: "Ancestry",
    value: ["EUR", "SAS"],
    sort: true,
    unique: true
  })

viewof chosen_metric = Inputs.radio(new Map([["β", "BETA"], ["Area Under Curve (AUC)", "AUC"], ["Odds Ratio (OR)", "OR"], ["R²", "R2"]]), {label: "Metric", value: "BETA", disabled: disabled_metrics})

viewof endpoint = Inputs.select(endpoints, {value: "T2D", label: "Endpoint:"})

viewof best_method = Inputs.toggle({ label: "Filter best method?:", values: [["best"], ["best", "notbest"]]})
```


```{ojs}
//| echo: false
is_continuous = aq.fromJSON(metrics)
  .params({ endpoint: endpoint })
  .filter((d, $) => d.phenotype == $.endpoint)
  .sample(1, {shuffle: false})
  .get('is_continuous')

// continuous endpoints only support beta and r2 metrics
// binary endpoints support all endpoints, r2 is recalculated later
disabled_metrics = ({ true: ["AUC", "OR"], false: [] })[is_continuous]
```

```{ojs}
//| echo: false

beta_map = new Map([["x_label", "βₓ"], ["x", "BETA"], ["errorbar_high", "BETA_CI_HIGH"], ["errorbar_low", "BETA_CI_LOW"]])
auc_map = new Map([["x_label", "AUC"], ["x", "AUC_MEDIAN"], ["errorbar_high", "AUC_CI_HIGH"], ["errorbar_low", "AUC_CI_LOW"]])
r2_map = new Map([["x_label", "R²"], ["x", "r2"], ["errorbar_high", "r2_high"], ["errorbar_low", "r2_low"]])
or_map = new Map([["x_label", "Odds Ratio"], ["x", "OR"], ["errorbar_high", "OR_CI_HIGH"], ["errorbar_low", "OR_CI_LOW"]])

metrics_map = ({ "BETA": beta_map, "AUC": auc_map, "R2": r2_map, "OR": or_map })
```

```{ojs}
//| echo: false
//| panel: fill
Plot.plot({
  grid: true,
  // make plot accessible for screen readers
  ariaLabel: "Explanation of some stuff", // todo: fix
  marginTop: 50,
  marginLeft: 150,
  marginRight: 80,
  x: {
    label: metrics_map[chosen_metric].get("x_label") + " →",
    nice: true
  },
  y: {
    label: "Development method"
  },
  color: {
    type: "categorical",
    legend: false
  },
  symbol: {
    legend: true
  },
  style: {
    fontSize: "12px"
  },
  facet: {
    data: filtered, 
    y: "bbid", 
    x: "ancestry",
    marginRight: 75,
    marginTop: 50
  },
  fx: {
    label: "Ancestry"
  },
  fy: {
    label: "Biobank"
  },
  marks: [
    Plot.frame(),
    // link == error bar
    Plot.link(filtered, {
      x1: metrics_map[chosen_metric].get("errorbar_low"),
      x2:  metrics_map[chosen_metric].get("errorbar_high"),
      y1: "method",
      y2: "method"
    }),
    Plot.dot(filtered, {
      x:  metrics_map[chosen_metric].get("x"), 
      y: "method",
      fill: "method",
      symbol: "method_type"
    })
  ]
})
```

```{ojs}
//| echo: false

import { aq, op } from '@uwdata/arquero'

// use arquero to dynamically filter and mutate data client-side
filtered = aq.fromJSON(metrics)
  .params({ biobanks: biobanks, methods: methods, ancestries: ancestries, endpoint: endpoint, best_method: best_method })
  .filter((d, $) => op.includes($.biobanks, d.bbid) &&
    op.includes($.ancestries, d.ancestry) &&
    op.includes($.methods, d.method) &&
    op.includes($.endpoint, d.phenotype))
  .groupby(['bbid', 'ancestry', 'phenotype'])
  .derive( { best_method: d => d.BETA == op.max(d.BETA) ? "best": "notbest" })
  .filter((d, $) => op.includes($.best_method, d.best_method ))
  // binary traits -> h2l (variance explained on the liability scale)
  // continuous traits -> R2_OBS (variance explained on the observed scale)
  // create a new r2 column which selects the correct scale
  .derive( { 
     r2: d => d.is_continuous ? d.R2_OBS : d.h2l,
     r2_high: d => d.is_continuous ? d.R2_OBS_CI_HIGH : d.h2l_ci_high,
     r2_low: d => d.is_continuous ? d.R2_OBS_CI_LOW : d.h2l_ci_low,
   })
```

## Conclusion

Using an ensemble of scores, each created using a different PGS development method, can capture a larger effect size for a phenotype. This means that the strength of the relationship between genetic data and phenotype is greater.
