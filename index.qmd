---
title: "prs-method-document"
---

```{r}
#| echo: false
#| message: false
library(dplyr)
```
# 5 European Biobanks

## R map 

```{r}
#| echo: false

# n taken from: https://www.interveneproject.eu/who-we-are
biobank_geo_data <- tibble::tribble(
  ~latitude,  ~longitude, ~bb, ~n,
  53.395399745894586, -2.180809763111116, "UK Biobank", 500000,
  51.5168136896447, -0.06164507552512638, "Genes & Health", 100000,
  58.37306995058682, 26.71770667106068, "Estonia Biobank", 200000,
  63.739797063187694, 11.290036844327096, "HUNT Biobank", 100000,
  60.17469210590568, 24.950115192601018, "FinnGen", 500000
)

ojs_define(biobank_geo_data)

leaflet::leaflet(biobank_geo_data) %>%
  leaflet::addTiles() %>%
  leaflet::addMarkers(~longitude, ~latitude, label=~bb,
                      labelOptions = leaflet::labelOptions(noHide = T,
                                                           direction = "left",
                                                           textsize = "14px"))

```

## OJS map 

```{ojs}
//| code-fold: true
d3 = require('d3')

// todo: bundle this data locally 
world = await d3.json("https://cdn.jsdelivr.net/npm/world-atlas@2/countries-110m.json")
land = topojson.feature(world, world.objects.land)

// use a circle to focus on northern Europe
lat = 15
long = 65
circle = d3.geoCircle().center([lat, long]).radius(15)()

Plot.plot({
    projection: {
    type: "azimuthal-equidistant",
    rotate: [-9, -34],
    domain: circle,
    inset: 10
  },
  marks: [
    Plot.geo(land, {fill: "currentColor", fillOpacity: 0.2}),
    Plot.geo(circle, {stroke: "red", strokeOpacity: 0}), // hide the circle
    Plot.graticule(),
    Plot.frame(),
    Plot.dot(transpose(biobank_geo_data), {x: "longitude", y: "latitude", r: "n", stroke: "red", fill: "red", fillOpacity: 0.2})
  ]
})

```


# Figure 1A (to do: come up with a fancier name)

```{r}
#| echo: false
#| warning: false

library(prsCompaR)

library(readr)
library(dplyr)

data(metrics)

metrics %>%
  group_by(bbid, ancestry, phenotype) %>%
  mutate(best_method = ifelse(BETA == max(BETA), TRUE, FALSE)) -> metrics_annotated

endpoints <- unique(metrics$phenotype)
prs_methods <- unique(metrics$method)
plot_data <- metrics_annotated

ojs_define(plot_data)
ojs_define(endpoints)
```

```{ojs}
//| code-fold: true
//| panel: input

viewof biobanks = Inputs.checkbox(
  new Map( 
  [["UK Biobank", "ukbb"], ["Estonia Biobank", "ebb"], ["Genes & Health", "gnh"], ["FinnGenn", "finngen"], ["HUNT", "hunt"]]),
  { value: ["ukbb", "ebb", "gnh", "finngen", "hunt"], 
  label: "Biobank:",
  sort: true, 
  unique: true }
)

viewof methods = Inputs.checkbox(
  ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpres2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
  { value: ["dbslmm", "sbayesr", "lassosum", "prscs", "ldpres2", "megaprs", "pt.clump", "UKBB.EnsPRS"],
  label: "Method:",
  sort: true, 
  unique: true }
)

viewof ancestries = Inputs.checkbox(
  ["EUR", "SAS"],
  { label: "Ancestry",
    value: ["EUR", "SAS"],
    sort: true,
    unique: true
})

viewof metrics = Inputs.radio(new Map([["β", "BETA"], ["Area Under Curve (AUC)", "AUC"], ["Odds Ratio (OR)", "OR"], ["R²", "R2"]]), {label: "Metric", value: "BETA"})

viewof endpoint = Inputs.select(endpoints, {value: "T2D", label: "Endpoint:"})

viewof best_method = Inputs.toggle({label: "Show best method:", value: false})

viewof fontsize = Inputs.range([12, 40], {step: 2, value: 16, label: "Font size:" })

filtered = transpose(plot_data).filter(function(metric) {
  if (best_method) {
    // don't filter based on method twice
    return ancestries.includes(metric.ancestry) && 
      endpoint.includes(metric.phenotype) && 
      metric.best_method == best_method;
  } else {
    return  biobanks.includes(metric.bbid) && 
      methods.includes(metric.method) && 
      ancestries.includes(metric.ancestry) && 
      endpoint.includes(metric.phenotype);
  }
})

```

```{ojs}
//| code-fold: true
//| label: fig-penguin-body-mass
//| fig-cap: "Penguin body mass by sex and species"


Plot.plot({
  marginTop: 50,
  marginLeft: 150,
  marginRight: 50,
  marginBottom: 50,
  x: {label: "βₓ"},
  y: {label: "Development method"},
  color: {
    scheme: "Tableau10", 
    legend: false
  },
  symbol: {
    legend: true
  },
  style: {
    fontSize: fontsize.toString().concat("px")
  },
  grid: true,
  facet: {
    data: filtered, 
    y: "bbid", 
    x: "ancestry"
  },
  marks: [
    Plot.frame(),
    // link == error bar
    Plot.link(filtered, {
      x1: "BETA_CI_LOW",
      x2: "BETA_CI_HIGH",
      y1: "method",
      y2: "method"
    }),
    Plot.dot(filtered, {
      x: "BETA", 
      y: "method",
      fill: "method",
      symbol: "method"
    })
  ]
})

```
